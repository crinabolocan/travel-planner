version: '3.9'

services:
  # AuthService - autentificare + JWT
  authservice:
    image: authservice:latest
    ports:
      - "5011:8080"
    depends_on:
      - userdataservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - app_net

  # UserDataService - date utilizatori (DB + API)
  userdataservice:
    image: userdataservice:latest
    ports:
      - "5002:8080"
    depends_on:
      - db-users
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - app_net

  # DB pentru UserDataService
  db-users:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: usersdb
    volumes:
      - users_pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app_net

  # TripPlannerService - planificare călătorii
  tripplannerservice:
    image: tripplannerservice:latest
    ports:
      - "5010:8080"
    depends_on:
      - db-trip
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:8080
    networks:
      - app_net

  # DB pentru TripPlannerService
  db-trip:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tripdb
    ports:
      - "5434:5432"
    volumes:
      - trip_pgdata:/var/lib/postgresql/data
    networks:
      - app_net

  # Adminer - UI pentru baze de date
  adminer:
    image: adminer
    restart: always
    ports:
      - "8085:8080"
    networks:
      - app_net

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app_net

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    networks:
      - app_net

  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - app_net

  kong-migrations:
    image: kong:3.4
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap
    networks:
      - app_net

  kong:
    image: kong:3.4
    depends_on:
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - app_net

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  users_pgdata:
  trip_pgdata:
  kong_data:
  portainer_data:
